# Docker Compose override for local development
version: '3.8'

services:
  backend:
    build:
      target: development
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/ticket_system_dev
    env_file:
      - ./backend/.env.development
    volumes:
      - ./backend:/app
      - backend_node_modules:/app/node_modules
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    command: ["python", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  postgres:
    image: postgres:16-alpine
    container_name: ticket-system-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ticket_system_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - ticket-system-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ticket_system_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ticket-system-pgadmin-dev
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data_dev:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ticket-system-network

  # Remove nginx in development to simplify setup
  nginx:
    profiles:
      - production

volumes:
  postgres_data_dev:
    driver: local
  pgadmin_data_dev:
    driver: local
  backend_node_modules:
    driver: local